// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
       zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
   // zx or zy
   Mux16(a=x, b=false, sel=zx, out=x1);
   Mux16(a=y, b=false, sel=zy, out=y1);
   
   // nx or ny
   Not16(in=x1, out=x1-);
   Not16(in=y1, out=y1-);
   Mux16(a=x1, b=x1-, sel=nx, out=x2);
   Mux16(a=y1, b=y1-, sel=ny, out=y2);
   
   //f
   
   Add16(a= x2, b= y2, out= x2plusy2	);
   And16(a= x2, b= y2, out= x2andy2	);
   Mux16(a= x2andy2, b= x2plusy2, sel=f, out= alpha);
   
   //no
   Not16(in=alpha, out=alpha-);
   Mux16(a= alpha, b=alpha-, sel=no, out=out, 
   
   out[0] = outbit0,
   out[1] = outbit1,
   out[2] = outbit2,
   out[3] = outbit3,
   out[4] = outbit4,
   out[5] = outbit5,
   out[6] = outbit6,
   out[7] = outbit7,
   out[8] = outbit8,
   out[9] = outbit9,
   out[10] = outbit10,
   out[11] = outbit11,
   out[12] = outbit12,
   out[13] = outbit13,
   out[14] = outbit14,
   out[15] = outbit15,
   
   out[15]=zrcheck);
   
   //check if out has all zeroes
   //or each bit of out with the other. if result = 0, zr needs to be =1
   
   Or(a=outbit0,b=outbit1,out=check0);
   Or(a=outbit1,b=check0,out=check1);
   Or(a=outbit2,b=check1,out=check2);
   Or(a=outbit3,b=check2,out=check3);
   Or(a=outbit4,b=check3,out=check4);
   Or(a=outbit5,b=check4,out=check5);
   Or(a=outbit6,b=check5,out=check6);
   Or(a=outbit7,b=check6,out=check7);
   Or(a=outbit8,b=check7,out=check8);
   Or(a=outbit9,b=check8,out=check9);
   Or(a=outbit10,b=check9,out=check10);
   Or(a=outbit11,b=check10,out=check11);
   Or(a=outbit12,b=check11,out=check12);
   Or(a=outbit13,b=check12,out=check13);
   Or(a=outbit14,b=check13,out=check14);
   Or(a=outbit15,b=check14,out=checkfinal);
   
   //use checkfinal as the selection bit
   //if checkfinal=0, zr will be true (i.e. 1)
   
   Mux(a=true,b=false,sel=checkfinal,out=zr);
   
   //for ng, check if out[15] (aliased as zrcheck) = 1
   //if so, if zrcheck = 1, ng will be true (i.e. 1)
   Mux(a=false,b=true,sel=zrcheck,out=ng);
   
   
   
   
   
   
   
   
   
   
   
   
   
   
}